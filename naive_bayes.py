# -*- coding: utf-8 -*-
"""Naive_Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14t1iZ0XW8symKJh7oo-8_L9Wj5KZ4WT0
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Multinomial Naive Bayes classifier
clf = MultinomialNB()
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Print classification report
class_names = iris.target_names
report = classification_report(y_test, y_pred, target_names=class_names)
print("Classification Report:\n", report)

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

# Example dataset: text classification
X_train = ["I love machine learning", "I enjoy natural language processing", "I like deep learning"]
y_train = [1, 1, 0]

X_test = ["I am studying Naive Bayes", "I am practicing machine learning"]
y_test = [1, 0]

# Vectorize the text data
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Initialize and train the Multinomial Naive Bayes classifier
clf = MultinomialNB()
clf.fit(X_train_vec, y_train)

# Make predictions
y_pred = clf.predict(X_test_vec)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

import numpy as np
from collections import defaultdict
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

class MultinomialNaiveBayes:
    def fit(self, X, y):
        self.classes = np.unique(y)
        self.class_probs = {}
        self.feature_probs = {}

        # Calculate class probabilities
        total_samples = len(y)
        for c in self.classes:
            class_samples = X[y == c]
            self.class_probs[c] = len(class_samples) / total_samples
            self.feature_probs[c] = {}

            # Calculate feature probabilities for each class
            for feature_idx in range(X.shape[1]):
                feature_values = class_samples[:, feature_idx]
                unique_values = np.unique(feature_values)
                self.feature_probs[c][feature_idx] = {}
                for val in unique_values:
                    count = np.sum(feature_values == val)
                    self.feature_probs[c][feature_idx][val] = (count + 1) / (len(class_samples) + len(unique_values))

    def predict(self, X):
        predictions = []
        for x in X:
            posteriors = {}
            for c in self.classes:
                posterior = np.log(self.class_probs[c])
                for feature_idx, val in enumerate(x):
                    if val in self.feature_probs[c][feature_idx]:
                        posterior += np.log(self.feature_probs[c][feature_idx][val])
                posteriors[c] = posterior
            predictions.append(max(posteriors, key=posteriors.get))
        return predictions

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Multinomial Naive Bayes classifier
clf = MultinomialNaiveBayes()
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Print classification report
class_names = iris.target_names
report = classification_report(y_test, y_pred, target_names=class_names)
print("Classification Report:\n", report)

